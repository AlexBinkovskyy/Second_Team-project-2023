'use strict';

const vite = require('vite');
const path = require('path');
const fs = require('fs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const path__default = /*#__PURE__*/_interopDefaultLegacy(path);
const fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

const tagMatcher = new RegExp('<load(?:.*?)="([^"]+)"(.*?)/>', "gs");
const attrMatcher = new RegExp('(?:(?:s)?([a-z0-9_-]+)(?:="([^"]*)"|))', "gi");
const replaceAttrMatcher = new RegExp("{=[$]([a-z0-9_-]+)}", "gi");
function injectHTML(cfg) {
  let config;
  async function renderSnippets(code, codePath) {
    if (!config) {
      return code;
    }
    const matches = code.matchAll(tagMatcher);
    for (const match of matches) {
      let [tag, url, attrs] = match;
      let root = config.root;
      if (url.startsWith(".")) {
        root = path__default.dirname(root + codePath);
      } else {
        url = "/" + url;
      }
      if (!(url.endsWith(".htm") || url.endsWith(".html"))) {
        ["html", "htm"].some((item) => {
          const filePath2 = vite.normalizePath(path__default.join(root, url, `/index.${item}`));
          if (fs__default.existsSync(filePath2)) {
            url += `/index.${item}`;
            return true;
          }
        });
      }
      const filePath = vite.normalizePath(path__default.join(root, url));
      if (cfg?.debug?.logPath) {
        console.log("Trying to include ", filePath);
      }
      let out = tag;
      try {
        let data = fs__default.readFileSync(filePath, "utf8");
        for (const attr of attrs.matchAll(attrMatcher)) {
          data = data.replace(`{=$${attr[1]}}`, attr[2]);
        }
        data = data.replace(replaceAttrMatcher, cfg?.replace?.undefined ?? "$&");
        out = await renderSnippets(data, url);
      } catch (error) {
        if (error instanceof Error) {
          out = error.message;
        }
        console.error(out);
      }
      code = code.replace(tag, out);
    }
    return code;
  }
  return {
    name: "static-html-loader",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    transformIndexHtml: {
      enforce: "pre",
      transform(html, ctx) {
        return renderSnippets(html, ctx.path);
      }
    }
  };
}

module.exports = injectHTML;
